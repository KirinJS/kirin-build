"use strict";
var _ = require("underscore");
var Generator = require("./generators").Generator;

var defaultIndent = "    ";

exports.ModuleGenerator = (function () {
    function CommonJs (usage) {
        this.usage = usage;
        this.indent = 0;
    }
    CommonJs.prototype = new Generator();
    
    var builtins = {
            "object": "_.isObject($0) && !_.isArray($0)",
            "array": "_.isArray($0)",
            "int": "_.isNumber($0)",
            "float": "_.isNumber($0)",
            "double": "_.isNumber($0)",
            "short": "_.isNumber($0)",
            "boolean": "_.isBoolean($0)",
            "string": "_.isString($0)"
    };
   
    
    CommonJs.prototype.importLines = function (importsArray) {
       return [];
    };

    CommonJs.prototype.packageLines = function (classObject) {
        // NOP;
       var className = classObject.name,
           superClass = classObject.superClass;
       var lines = ["function " + className + " () {"];
       if (!classObject.properties || classObject.properties.length === 0) {
           lines.push(defaultIndent + "// No properties declared");
       }
       _.each(classObject.properties, function (p) {
           var typeName = typeString(p.type),
               paramName = p.name, 
               value = p["default"];
           if (_.isUndefined(value)) {
               value = "null";
           } else {
               value = JSON.stringify(value);
           }
           
           lines.push(defaultIndent + "this." + paramName + " = " + value + "; // " + typeName);
           
       });
       
       lines.push("}");
       if (classObject.superClass) {
           lines.push("var " + superClass + " = require(\"" + superClass + "\");");
           lines.push(className + ".prototype = new " + superClass + "();");
       }
       lines.push("module.exports = " + className + ";");
       lines.push("var instance = " + className + ".prototype;");
       
       return lines;
    };
    
    function typeString (type) {
        var builtin = builtins[type];
        
        return builtin ? builtin : type.name;
    }
    
    function docsLines(docs, params, suppressIndent) {
        if (_.isUndefined(suppressIndent) && _.isBoolean(params)) {
            suppressIndent = params;
            params = null;
        }
        suppressIndent = true;
        var indent = suppressIndent ? "" : defaultIndent;
        
        var lines = [],
            comment = false;
        
        if (docs) {
            comment = true;
            lines.push(indent + "/**");
            lines.push(indent + " * " + docs);
        }

        if (params) {
            _.each(params, function (param) {
                if (!comment) {
                    lines.push(indent + "/**");
                    comment = true;
                }
                
                var paramLine = [" * @param", param.name, "{@link " + typeString(param.type) + "}"];
                if (param.docs) {
                    paramLine.push(param.docs);
                }
                lines.push(indent + paramLine.join(" "));
            });
        }
        
        if (comment) {
            lines.push(indent + " */");
        }
        
        return lines;
    }
    
    
    CommonJs.prototype.interfaceDeclLines = function (classObject) {
        return [];
    };    
    
    CommonJs.prototype.propertyLines = function (properties) {
        // NOP
        return [];
    };
    
    CommonJs.prototype.methodLine = function (sig) {
        var lines = [];
        
        var comment = false;

        lines.push(docsLines(sig.docs, sig.params));
        
        var namedArgs = _.filter(sig.name.split(":"), function (t) {
            return t;
        });
        
        var isFirst = true;
        var methodName = _.map(namedArgs, function (s) {
            if (isFirst) {
                isFirst = false;
                return s;
            }
            return s[0].toUpperCase() + s.substring(1);
        }).join("");
        
        var params  = _.map(sig.params, function (p) {
            return p.name;
        });        
        lines.push("instance." + methodName + " = function (" + params.join(", ") + ") {");
        var theComment = this.usage !== 'request' ? "// AUTOGENERATED, COPY DON'T EDIT" : "// AUTOGENERATED, REPLACE NOT EDIT";
        lines.push(defaultIndent + theComment);
        lines.push(defaultIndent + "throw new Error(\"" + methodName + " is unimplemented\");");
        lines.push("};")
        
        return _.flatten(lines);
    };
    
    CommonJs.prototype.methodLines = function (sigArray) {
        var self = this;
        var allLines = self.role === "javascript" ? [
            "instance.onLoad = function (nativeObject) {};",  " ",
            "instance.onResume = function () {};", " ",
            "instance.onPause = function () {};", " ",
            "instance.onUnload = function () {};", " "
                        ] : [];
         _.each(sigArray, function (sig) {
            var line = self.methodLine(sig);
            allLines.push(line);
            allLines.push(" ");
            
        });
        return allLines;
    };
    
    
    CommonJs.prototype.footer = function (classObject) {
        console.log("Generating footer");
        return this.generateValidate(classObject);
    };
    
    CommonJs.prototype.generateValidate = function (classObject) {
        var self = this, 
            lines = [];
        if (classObject.role !== 'request') {
           return [];
        }
        var indent = defaultIndent;
        // TODO if argv.buildType !== 'dev' return [];
        
        lines.push("instance.bridgeUtils = new require('kirin-validation').BridgeUtils({");
        // now print the schema
        var properties = classObject.properties,
            methods = classObject.methods,
            hasMethods = methods && methods.length,
            i, p, s;
        
        
        if (properties && properties.length) {
            lines.push("    properties: {");
            i = properties.length - 1;
            
            for (; i >= 0; i--) {
                p = properties[i];
                s = '"' + p.name +'": "' + (typeof p.type === 'string' ? p.type : "object") + '"';
                if (i > 0) {
                    s += "," 
                }
                lines.push("        " + s);
            }
            
            lines.push("    }" + (hasMethods ? "," : ""));
        }
        
        if (hasMethods) {
            lines.push("    methods: {");
            
            lines.push("    }");
        }
        
        lines.push("});")
        
        lines.push("instance.validate = function (nextValidator) {");
        lines.push(indent + "var self = this;")
        // TODO check types.

        
        lines.push("");
        
        
        var hasProperties = classObject.properties.length;
        if (hasProperties) {
        
            lines.push(indent + "var _ = require('underscore');");
            // _.each won't work.
            lines.push(indent + "_.each(self, function (i, name) {");
            indent += defaultIndent;
            lines.push(indent + "var value = self[name];");
            
        }
        var isFirst = true,
            ifString = "if";
        _.each(classObject.methods, function (method) {
            var name = self.unObjectiveC(method.name);
            lines.push(indent + ifString + " (name === \"" + name + "\"" +
                    " && typeof value !== 'function') {");
            lines.push(indent + defaultIndent + "throw new Error('Expected " + name + " to be a function');");
            if (isFirst) {
                isFirst = false;
                ifString = "} else if"
            }
        });
        
        _.each(classObject.properties, function (property) {
            var name = property.name, type = property.type;
            
            var test = builtins[type];
            if (test) {
                test = test.replace(/\$0/g, "name");
                lines.push(indent + ifString + " (name === \"" + name + "\" && !"+test+") {");
                lines.push(indent + defaultIndent + "throw new Error('Expected " + name + " to be a "+type+"');");
             
            } else {
                lines.push(indent + ifString + " (name === \"" + name + "\" " +
                        " && value.validate && " +
                        "!value.validate(nextValidator)) {");
                lines.push(indent + defaultIndent + "throw new Error('Expected " + name + " to be validated');");
            }
            if (isFirst) {
                isFirst = false;
                ifString = "} else if"
            }
        });

        if (!isFirst) {            
            lines.push(indent + "}");
        }
        if (hasProperties) {
            indent = defaultIndent;
            lines.push(indent + "});");
        }
        lines.push("")

        lines.push(indent + "nextValidator(this, " +
                JSON.stringify(classObject.validate.acceptedForms) +
        		", " +
        		JSON.stringify(classObject.validate.dependencies) +
        		");");
        
        lines.push("};");
    
        return lines;
        
    };
    
    return CommonJs;
}());

exports.getOutputDirectory = function (nodeModule, kirinInfo, platformBlock) {
    return nodeModule.directory;
};

exports.generateFiles = function (filePrefix, classOrder, fileMap, nodeModule) {
    fileMap = fileMap || {};
    var generator = new exports.ModuleGenerator(),
        path = require("path");
    
    if (!filePrefix) {
        throw new Error("An idlOutput is needed in package.json");
    }
    
    _.each(classOrder, function (irClass) {
        if (!irClass) {
            return;
        }
        if (irClass.role === "javascript") {            
            var lines = generator.lines(irClass),
                content = lines.join("\n"),
                filename = "stubs/" + irClass.name + ".stub.js";
            
            fileMap[path.join(filePrefix, filename)] = content;
            // this is wrong! addFile breaks immutability
            nodeModule.addFile(path.join(filePrefix, filename));
        } else if (irClass.role === "request") {
            var lines = generator.lines(irClass),
                content = lines.join("\n"),
                filename = irClass.name + ".js";
        
            fileMap[path.join(filePrefix, filename)] = content;
           // nodeModule.addFile(path.join(filePrefix, filename));            
        }
    });
    
    return fileMap;
};
